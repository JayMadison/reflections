When would you want to use a remote repository rather than keeping all your work local?

It would be a better option if you were working colaboratively with others, as you could 
more easily keep up to date with changes. Also a good option if you frequently move betweeen
computers or wanted to keep the data backed up.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

The answer is simlar to automatic commits, basically you wouldn't want to overwrite local files
automatically and you may only want to pull down new commits at certain times. Essenitally it 
allows the developer to control when those syncs happen. 

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks are clones on gitlab or github, and don't exit locally, but do attribute to the original author. 
CLones are copies of repositories (usually remote) and branches are multiple paths w/i a repository. 
Forks can be used to expand on the work of others, clones can be used to create your own copy of an 
exisitng repo so you can modify it. Branches handle most of the chagnes w/i a single project. 

What is the benefit of having a copy of the last known state of the remote stored locally?
Before doing a merge, you can compare the two, and you can run git log on the remote 
repo to see what other developers are doing without impacting your copy of the code.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
GitHub makes it much easier with it's notificaitons and other social features. You can do it in git
but you would likely need to use some other means of communicating like email. 

When would you want to make changes in a separate branch rather than directly in master? What benefits 
does each approach have?
Smaller projects or single developers can probably just use master as the complexity is usually pretty
low, so the overhead of multiple branches proably isn't worth it. On bigger projects or ones with a lot
of collaboration, using feature branches makes things much easier to mannage. 
